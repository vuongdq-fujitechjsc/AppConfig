# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 14.0.1
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Force Bundler Version
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler; gem install bundler:1.17.2;
      - run:
          name: "Install"
          command: "make"
      - run:
          name: "Run Unit test"
          command: "bundle exec fastlane unittest --env debug"

  deploy-st:
    macos: 
      xcode: 14.0.1
    steps:
      - checkout
      - run:
          name: "Install"
          command: "make"
      - run:
          name: "Setup Certificate"
          command: "make setupCertificate"
      - run:
          name: "Deploy Testflight For ST"
          command: "make exportTestFlightForST"

  deploy-product:
    macos: 
      xcode: 14.0.1
    steps:
      - checkout
      - run:
          name: "Install"
          command: "make"
      - run:
          name: "Setup Certificate"
          command: "make setupCertificate"
      - run:
          name: "Deploy Testflight For Product"
          command: "make exportTestFlightForProduct"
    
workflows:
  # Workflow: build for any PR 
  build:
    jobs:
      - build
      
  # Workflow: deploy to testflight of ST environment 
  deploy-st:
    when: 
     and:
        - equal: [ "deploy-st", << pipeline.parameters.GHA_Meta >> ]
    jobs:
      - deploy-st

  # Workflow: deploy to testflight of Product environment
  deploy-product:
    when: 
     and:
        - equal: [ "deploy-product", << pipeline.parameters.GHA_Meta >> ]
    jobs:
      - deploy-product